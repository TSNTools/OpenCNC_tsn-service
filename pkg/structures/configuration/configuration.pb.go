// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: configuration.proto

package configuration

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserToNetworkRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumSeamlessTrees uint32 `protobuf:"varint,1,opt,name=NumSeamlessTrees,json=num-seamless-trees,proto3" json:"NumSeamlessTrees,omitempty"`
	MaxLatency       uint32 `protobuf:"varint,2,opt,name=MaxLatency,json=max-latency,proto3" json:"MaxLatency,omitempty"`
}

func (x *UserToNetworkRequirements) Reset() {
	*x = UserToNetworkRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToNetworkRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToNetworkRequirements) ProtoMessage() {}

func (x *UserToNetworkRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToNetworkRequirements.ProtoReflect.Descriptor instead.
func (*UserToNetworkRequirements) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *UserToNetworkRequirements) GetNumSeamlessTrees() uint32 {
	if x != nil {
		return x.NumSeamlessTrees
	}
	return 0
}

func (x *UserToNetworkRequirements) GetMaxLatency() uint32 {
	if x != nil {
		return x.MaxLatency
	}
	return 0
}

type InterfaceCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanTagCapable bool `protobuf:"varint,1,opt,name=VlanTagCapable,json=vlan-tag-capable,proto3" json:"VlanTagCapable,omitempty"`
}

func (x *InterfaceCapabilities) Reset() {
	*x = InterfaceCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceCapabilities) ProtoMessage() {}

func (x *InterfaceCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceCapabilities.ProtoReflect.Descriptor instead.
func (*InterfaceCapabilities) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *InterfaceCapabilities) GetVlanTagCapable() bool {
	if x != nil {
		return x.VlanTagCapable
	}
	return false
}

type StreamId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string `protobuf:"bytes,1,opt,name=MacAddress,json=mac-address,proto3" json:"MacAddress,omitempty"`
	UniqueId   string `protobuf:"bytes,2,opt,name=UniqueId,json=unique-id,proto3" json:"UniqueId,omitempty"`
}

func (x *StreamId) Reset() {
	*x = StreamId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamId) ProtoMessage() {}

func (x *StreamId) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamId.ProtoReflect.Descriptor instead.
func (*StreamId) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *StreamId) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *StreamId) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

type InterfaceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress    string `protobuf:"bytes,1,opt,name=MacAddress,json=mac-address,proto3" json:"MacAddress,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=InterfaceName,json=interface-name,proto3" json:"InterfaceName,omitempty"`
}

func (x *InterfaceId) Reset() {
	*x = InterfaceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceId) ProtoMessage() {}

func (x *InterfaceId) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceId.ProtoReflect.Descriptor instead.
func (*InterfaceId) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *InterfaceId) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *InterfaceId) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32        `protobuf:"varint,1,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	InterfaceId *InterfaceId `protobuf:"bytes,2,opt,name=InterfaceId,json=interface-id,proto3" json:"InterfaceId,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *Interface) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Interface) GetInterfaceId() *InterfaceId {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

type ListenerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                uint32                     `protobuf:"varint,1,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	StrId                *StreamId                  `protobuf:"bytes,2,opt,name=StrId,json=stream-id,proto3" json:"StrId,omitempty"`
	EndStationInterfaces []*Interface               `protobuf:"bytes,3,rep,name=EndStationInterfaces,json=end-station-interfaces,proto3" json:"EndStationInterfaces,omitempty"`
	UserToNetReq         *UserToNetworkRequirements `protobuf:"bytes,4,opt,name=UserToNetReq,json=user-to-network-requirements,proto3" json:"UserToNetReq,omitempty"`
	InterfCap            *InterfaceCapabilities     `protobuf:"bytes,5,opt,name=InterfCap,json=interface-capabilities,proto3" json:"InterfCap,omitempty"`
}

func (x *ListenerGroup) Reset() {
	*x = ListenerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerGroup) ProtoMessage() {}

func (x *ListenerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerGroup.ProtoReflect.Descriptor instead.
func (*ListenerGroup) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *ListenerGroup) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ListenerGroup) GetStrId() *StreamId {
	if x != nil {
		return x.StrId
	}
	return nil
}

func (x *ListenerGroup) GetEndStationInterfaces() []*Interface {
	if x != nil {
		return x.EndStationInterfaces
	}
	return nil
}

func (x *ListenerGroup) GetUserToNetReq() *UserToNetworkRequirements {
	if x != nil {
		return x.UserToNetReq
	}
	return nil
}

func (x *ListenerGroup) GetInterfCap() *InterfaceCapabilities {
	if x != nil {
		return x.InterfCap
	}
	return nil
}

type StreamRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank uint32 `protobuf:"varint,1,opt,name=Rank,json=rank,proto3" json:"Rank,omitempty"`
}

func (x *StreamRank) Reset() {
	*x = StreamRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRank) ProtoMessage() {}

func (x *StreamRank) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRank.ProtoReflect.Descriptor instead.
func (*StreamRank) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *StreamRank) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type IeeeMacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationMac string `protobuf:"bytes,1,opt,name=DestinationMac,json=destination-mac-address,proto3" json:"DestinationMac,omitempty"`
	SourceMac      string `protobuf:"bytes,2,opt,name=SourceMac,json=source-mac,proto3" json:"SourceMac,omitempty"`
}

func (x *IeeeMacAddress) Reset() {
	*x = IeeeMacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IeeeMacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IeeeMacAddress) ProtoMessage() {}

func (x *IeeeMacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IeeeMacAddress.ProtoReflect.Descriptor instead.
func (*IeeeMacAddress) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *IeeeMacAddress) GetDestinationMac() string {
	if x != nil {
		return x.DestinationMac
	}
	return ""
}

func (x *IeeeMacAddress) GetSourceMac() string {
	if x != nil {
		return x.SourceMac
	}
	return ""
}

type IeeeVlanTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriorityCodePoint uint32 `protobuf:"varint,1,opt,name=PriorityCodePoint,json=priority-code-point,proto3" json:"PriorityCodePoint,omitempty"`
	VlanId            uint32 `protobuf:"varint,2,opt,name=VlanId,json=vlan-id,proto3" json:"VlanId,omitempty"`
}

func (x *IeeeVlanTag) Reset() {
	*x = IeeeVlanTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IeeeVlanTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IeeeVlanTag) ProtoMessage() {}

func (x *IeeeVlanTag) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IeeeVlanTag.ProtoReflect.Descriptor instead.
func (*IeeeVlanTag) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *IeeeVlanTag) GetPriorityCodePoint() uint32 {
	if x != nil {
		return x.PriorityCodePoint
	}
	return 0
}

func (x *IeeeVlanTag) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type Ipv4Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIpAddr  string `protobuf:"bytes,1,opt,name=SrcIpAddr,json=src-ip-addr,proto3" json:"SrcIpAddr,omitempty"`
	DestIpAddr string `protobuf:"bytes,2,opt,name=DestIpAddr,json=dest-ip-addr,proto3" json:"DestIpAddr,omitempty"`
	Dscp       uint32 `protobuf:"varint,3,opt,name=Dscp,json=dscp,proto3" json:"Dscp,omitempty"`
	Protocol   uint32 `protobuf:"varint,4,opt,name=Protocol,json=protocol,proto3" json:"Protocol,omitempty"`
	SrcPort    uint32 `protobuf:"varint,5,opt,name=SrcPort,json=src-port,proto3" json:"SrcPort,omitempty"`
	DestPort   uint32 `protobuf:"varint,6,opt,name=DestPort,json=dest-port,proto3" json:"DestPort,omitempty"`
}

func (x *Ipv4Tuple) Reset() {
	*x = Ipv4Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4Tuple) ProtoMessage() {}

func (x *Ipv4Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4Tuple.ProtoReflect.Descriptor instead.
func (*Ipv4Tuple) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *Ipv4Tuple) GetSrcIpAddr() string {
	if x != nil {
		return x.SrcIpAddr
	}
	return ""
}

func (x *Ipv4Tuple) GetDestIpAddr() string {
	if x != nil {
		return x.DestIpAddr
	}
	return ""
}

func (x *Ipv4Tuple) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *Ipv4Tuple) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Ipv4Tuple) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Ipv4Tuple) GetDestPort() uint32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

type Ipv6Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIpAddr  string `protobuf:"bytes,1,opt,name=SrcIpAddr,json=src-ip-addr,proto3" json:"SrcIpAddr,omitempty"`
	DestIpAddr string `protobuf:"bytes,2,opt,name=DestIpAddr,json=dest-ip-addr,proto3" json:"DestIpAddr,omitempty"`
	Dscp       uint32 `protobuf:"varint,3,opt,name=Dscp,json=dscp,proto3" json:"Dscp,omitempty"`
	Protocol   uint32 `protobuf:"varint,4,opt,name=Protocol,json=protocol,proto3" json:"Protocol,omitempty"`
	SrcPort    uint32 `protobuf:"varint,5,opt,name=SrcPort,json=src-port,proto3" json:"SrcPort,omitempty"`
	DestPort   uint32 `protobuf:"varint,6,opt,name=DestPort,json=dest-port,proto3" json:"DestPort,omitempty"`
}

func (x *Ipv6Tuple) Reset() {
	*x = Ipv6Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6Tuple) ProtoMessage() {}

func (x *Ipv6Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6Tuple.ProtoReflect.Descriptor instead.
func (*Ipv6Tuple) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{10}
}

func (x *Ipv6Tuple) GetSrcIpAddr() string {
	if x != nil {
		return x.SrcIpAddr
	}
	return ""
}

func (x *Ipv6Tuple) GetDestIpAddr() string {
	if x != nil {
		return x.DestIpAddr
	}
	return ""
}

func (x *Ipv6Tuple) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *Ipv6Tuple) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Ipv6Tuple) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *Ipv6Tuple) GetDestPort() uint32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

type DataFrameSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint32          `protobuf:"varint,1,opt,name=Index,json=index,proto3" json:"Index,omitempty"`
	MacAddr *IeeeMacAddress `protobuf:"bytes,2,opt,name=MacAddr,json=ieee802-mac-addresses,proto3" json:"MacAddr,omitempty"`
	VlanTag *IeeeVlanTag    `protobuf:"bytes,3,opt,name=VlanTag,json=ieee802-vlan-tag,proto3" json:"VlanTag,omitempty"`
	Ipv4Tup *Ipv4Tuple      `protobuf:"bytes,4,opt,name=Ipv4Tup,json=ipv4tup,proto3" json:"Ipv4Tup,omitempty"`
	Ipv6Tup *Ipv6Tuple      `protobuf:"bytes,5,opt,name=Ipv6Tup,json=ipv6tup,proto3" json:"Ipv6Tup,omitempty"`
}

func (x *DataFrameSpecification) Reset() {
	*x = DataFrameSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameSpecification) ProtoMessage() {}

func (x *DataFrameSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameSpecification.ProtoReflect.Descriptor instead.
func (*DataFrameSpecification) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{11}
}

func (x *DataFrameSpecification) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DataFrameSpecification) GetMacAddr() *IeeeMacAddress {
	if x != nil {
		return x.MacAddr
	}
	return nil
}

func (x *DataFrameSpecification) GetVlanTag() *IeeeVlanTag {
	if x != nil {
		return x.VlanTag
	}
	return nil
}

func (x *DataFrameSpecification) GetIpv4Tup() *Ipv4Tuple {
	if x != nil {
		return x.Ipv4Tup
	}
	return nil
}

func (x *DataFrameSpecification) GetIpv6Tup() *Ipv6Tuple {
	if x != nil {
		return x.Ipv6Tup
	}
	return nil
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numerator   uint32 `protobuf:"varint,1,opt,name=Numerator,json=numerator,proto3" json:"Numerator,omitempty"`
	Denominator uint32 `protobuf:"varint,2,opt,name=Denominator,json=denominator,proto3" json:"Denominator,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{12}
}

func (x *Interval) GetNumerator() uint32 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *Interval) GetDenominator() uint32 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

type TimeAware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarliestTransmitOffset uint32 `protobuf:"varint,1,opt,name=EarliestTransmitOffset,json=earliest-transmit-offset,proto3" json:"EarliestTransmitOffset,omitempty"`
	LatestTransmitOffset   uint32 `protobuf:"varint,2,opt,name=LatestTransmitOffset,json=latest-transmit-offset,proto3" json:"LatestTransmitOffset,omitempty"`
	Jitter                 uint32 `protobuf:"varint,3,opt,name=Jitter,json=jitter,proto3" json:"Jitter,omitempty"`
}

func (x *TimeAware) Reset() {
	*x = TimeAware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeAware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeAware) ProtoMessage() {}

func (x *TimeAware) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeAware.ProtoReflect.Descriptor instead.
func (*TimeAware) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{13}
}

func (x *TimeAware) GetEarliestTransmitOffset() uint32 {
	if x != nil {
		return x.EarliestTransmitOffset
	}
	return 0
}

func (x *TimeAware) GetLatestTransmitOffset() uint32 {
	if x != nil {
		return x.LatestTransmitOffset
	}
	return 0
}

func (x *TimeAware) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

type TrafficSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval              *Interval  `protobuf:"bytes,1,opt,name=Interval,json=interval,proto3" json:"Interval,omitempty"`
	MaxFramesPerInterval  uint32     `protobuf:"varint,2,opt,name=MaxFramesPerInterval,json=max-frames-per-interval,proto3" json:"MaxFramesPerInterval,omitempty"`
	MaxFrameSize          uint32     `protobuf:"varint,3,opt,name=MaxFrameSize,json=max-frame-size,proto3" json:"MaxFrameSize,omitempty"`
	TransmissionSelection uint32     `protobuf:"varint,4,opt,name=TransmissionSelection,json=transmission-selection,proto3" json:"TransmissionSelection,omitempty"`
	TimeAware             *TimeAware `protobuf:"bytes,5,opt,name=TimeAware,json=time-aware,proto3" json:"TimeAware,omitempty"`
}

func (x *TrafficSpecification) Reset() {
	*x = TrafficSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficSpecification) ProtoMessage() {}

func (x *TrafficSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficSpecification.ProtoReflect.Descriptor instead.
func (*TrafficSpecification) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{14}
}

func (x *TrafficSpecification) GetInterval() *Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *TrafficSpecification) GetMaxFramesPerInterval() uint32 {
	if x != nil {
		return x.MaxFramesPerInterval
	}
	return 0
}

func (x *TrafficSpecification) GetMaxFrameSize() uint32 {
	if x != nil {
		return x.MaxFrameSize
	}
	return 0
}

func (x *TrafficSpecification) GetTransmissionSelection() uint32 {
	if x != nil {
		return x.TransmissionSelection
	}
	return 0
}

func (x *TrafficSpecification) GetTimeAware() *TimeAware {
	if x != nil {
		return x.TimeAware
	}
	return nil
}

type TalkerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrId                  *StreamId                  `protobuf:"bytes,1,opt,name=StrId,json=stream-id,proto3" json:"StrId,omitempty"`
	StrRank                *StreamRank                `protobuf:"bytes,2,opt,name=StrRank,json=stream-rank,proto3" json:"StrRank,omitempty"`
	EndStationInterfaces   []*Interface               `protobuf:"bytes,3,rep,name=EndStationInterfaces,json=end-station-interfaces,proto3" json:"EndStationInterfaces,omitempty"`
	DataFrameSpecification []*DataFrameSpecification  `protobuf:"bytes,4,rep,name=DataFrameSpecification,json=data-frame-specification,proto3" json:"DataFrameSpecification,omitempty"`
	TrafficSpecification   *TrafficSpecification      `protobuf:"bytes,5,opt,name=TrafficSpecification,json=traffic-specification,proto3" json:"TrafficSpecification,omitempty"`
	UserToNetReq           *UserToNetworkRequirements `protobuf:"bytes,6,opt,name=UserToNetReq,json=user-to-network-requirements,proto3" json:"UserToNetReq,omitempty"`
	InterfCap              *InterfaceCapabilities     `protobuf:"bytes,7,opt,name=InterfCap,json=interface-capabilities,proto3" json:"InterfCap,omitempty"`
}

func (x *TalkerGroup) Reset() {
	*x = TalkerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkerGroup) ProtoMessage() {}

func (x *TalkerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkerGroup.ProtoReflect.Descriptor instead.
func (*TalkerGroup) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{15}
}

func (x *TalkerGroup) GetStrId() *StreamId {
	if x != nil {
		return x.StrId
	}
	return nil
}

func (x *TalkerGroup) GetStrRank() *StreamRank {
	if x != nil {
		return x.StrRank
	}
	return nil
}

func (x *TalkerGroup) GetEndStationInterfaces() []*Interface {
	if x != nil {
		return x.EndStationInterfaces
	}
	return nil
}

func (x *TalkerGroup) GetDataFrameSpecification() []*DataFrameSpecification {
	if x != nil {
		return x.DataFrameSpecification
	}
	return nil
}

func (x *TalkerGroup) GetTrafficSpecification() *TrafficSpecification {
	if x != nil {
		return x.TrafficSpecification
	}
	return nil
}

func (x *TalkerGroup) GetUserToNetReq() *UserToNetworkRequirements {
	if x != nil {
		return x.UserToNetReq
	}
	return nil
}

func (x *TalkerGroup) GetInterfCap() *InterfaceCapabilities {
	if x != nil {
		return x.InterfCap
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Talker       *TalkerGroup     `protobuf:"bytes,1,opt,name=Talker,json=talker,proto3" json:"Talker,omitempty"`
	ListenerList []*ListenerGroup `protobuf:"bytes,2,rep,name=ListenerList,json=listener-list,proto3" json:"ListenerList,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{16}
}

func (x *Request) GetTalker() *TalkerGroup {
	if x != nil {
		return x.Talker
	}
	return nil
}

func (x *Request) GetListenerList() []*ListenerGroup {
	if x != nil {
		return x.ListenerList
	}
	return nil
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  float32    `protobuf:"fixed32,1,opt,name=Version,json=version,proto3" json:"Version,omitempty"`
	Requests []*Request `protobuf:"bytes,2,rep,name=Requests,json=requests,proto3" json:"Requests,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigRequest) GetVersion() float32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ConfigRequest) GetRequests() []*Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type StatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkerStatus   int32  `protobuf:"varint,1,opt,name=TalkerStatus,proto3" json:"TalkerStatus,omitempty"`     // TODO: update to enum: 0 = None, 1 = ready, 2 = failed
	ListenerStatus int32  `protobuf:"varint,2,opt,name=ListenerStatus,proto3" json:"ListenerStatus,omitempty"` // TODO: update to enum: 0 = None, 1 = ready, 2 = partial-failed, 3 = failed
	FailureCode    uint32 `protobuf:"varint,3,opt,name=FailureCode,proto3" json:"FailureCode,omitempty"`
}

func (x *StatusInfo) Reset() {
	*x = StatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusInfo) ProtoMessage() {}

func (x *StatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusInfo.ProtoReflect.Descriptor instead.
func (*StatusInfo) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{18}
}

func (x *StatusInfo) GetTalkerStatus() int32 {
	if x != nil {
		return x.TalkerStatus
	}
	return 0
}

func (x *StatusInfo) GetListenerStatus() int32 {
	if x != nil {
		return x.ListenerStatus
	}
	return 0
}

func (x *StatusInfo) GetFailureCode() uint32 {
	if x != nil {
		return x.FailureCode
	}
	return 0
}

type AccumulatedLatency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccumulatedLatency uint32 `protobuf:"varint,1,opt,name=AccumulatedLatency,proto3" json:"AccumulatedLatency,omitempty"`
}

func (x *AccumulatedLatency) Reset() {
	*x = AccumulatedLatency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccumulatedLatency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulatedLatency) ProtoMessage() {}

func (x *AccumulatedLatency) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulatedLatency.ProtoReflect.Descriptor instead.
func (*AccumulatedLatency) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{19}
}

func (x *AccumulatedLatency) GetAccumulatedLatency() uint32 {
	if x != nil {
		return x.AccumulatedLatency
	}
	return 0
}

type TimeAwareOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint32 `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"` // ns, EarlisetTransmitOffset < offset < LatestTransmitOffset
}

func (x *TimeAwareOffset) Reset() {
	*x = TimeAwareOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeAwareOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeAwareOffset) ProtoMessage() {}

func (x *TimeAwareOffset) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeAwareOffset.ProtoReflect.Descriptor instead.
func (*TimeAwareOffset) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{20}
}

func (x *TimeAwareOffset) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type InterfaceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceId *InterfaceId    `protobuf:"bytes,1,opt,name=InterfaceId,proto3" json:"InterfaceId,omitempty"`
	Type        int32           `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"` // 1 = mac-address/vlan, 2 = ipv4, 3 = ipv6
	MacAddr     *IeeeMacAddress `protobuf:"bytes,3,opt,name=MacAddr,proto3" json:"MacAddr,omitempty"`
	VlanTag     *IeeeVlanTag    `protobuf:"bytes,4,opt,name=VlanTag,proto3" json:"VlanTag,omitempty"`
	Ipv4Tup     *Ipv4Tuple      `protobuf:"bytes,5,opt,name=Ipv4Tup,proto3" json:"Ipv4Tup,omitempty"`
	Ipv6Tup     *Ipv6Tuple      `protobuf:"bytes,6,opt,name=Ipv6Tup,proto3" json:"Ipv6Tup,omitempty"`
	// provided if TimeAware is present in talker group
	TimeAwareOffset *TimeAwareOffset `protobuf:"bytes,7,opt,name=TimeAwareOffset,proto3" json:"TimeAwareOffset,omitempty"`
}

func (x *InterfaceConfiguration) Reset() {
	*x = InterfaceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceConfiguration) ProtoMessage() {}

func (x *InterfaceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceConfiguration.ProtoReflect.Descriptor instead.
func (*InterfaceConfiguration) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{21}
}

func (x *InterfaceConfiguration) GetInterfaceId() *InterfaceId {
	if x != nil {
		return x.InterfaceId
	}
	return nil
}

func (x *InterfaceConfiguration) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InterfaceConfiguration) GetMacAddr() *IeeeMacAddress {
	if x != nil {
		return x.MacAddr
	}
	return nil
}

func (x *InterfaceConfiguration) GetVlanTag() *IeeeVlanTag {
	if x != nil {
		return x.VlanTag
	}
	return nil
}

func (x *InterfaceConfiguration) GetIpv4Tup() *Ipv4Tuple {
	if x != nil {
		return x.Ipv4Tup
	}
	return nil
}

func (x *InterfaceConfiguration) GetIpv6Tup() *Ipv6Tuple {
	if x != nil {
		return x.Ipv6Tup
	}
	return nil
}

func (x *InterfaceConfiguration) GetTimeAwareOffset() *TimeAwareOffset {
	if x != nil {
		return x.TimeAwareOffset
	}
	return nil
}

type TalkerListenerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                  uint32                    `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	AccumulatedLatency     *AccumulatedLatency       `protobuf:"bytes,2,opt,name=AccumulatedLatency,proto3" json:"AccumulatedLatency,omitempty"`
	InterfaceConfiguration []*InterfaceConfiguration `protobuf:"bytes,3,rep,name=InterfaceConfiguration,proto3" json:"InterfaceConfiguration,omitempty"`
}

func (x *TalkerListenerStatus) Reset() {
	*x = TalkerListenerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkerListenerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkerListenerStatus) ProtoMessage() {}

func (x *TalkerListenerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkerListenerStatus.ProtoReflect.Descriptor instead.
func (*TalkerListenerStatus) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{22}
}

func (x *TalkerListenerStatus) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TalkerListenerStatus) GetAccumulatedLatency() *AccumulatedLatency {
	if x != nil {
		return x.AccumulatedLatency
	}
	return nil
}

func (x *TalkerListenerStatus) GetInterfaceConfiguration() []*InterfaceConfiguration {
	if x != nil {
		return x.InterfaceConfiguration
	}
	return nil
}

type StatusGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrId                *StreamId               `protobuf:"bytes,1,opt,name=StrId,proto3" json:"StrId,omitempty"`
	StatusInfo           *StatusInfo             `protobuf:"bytes,2,opt,name=StatusInfo,proto3" json:"StatusInfo,omitempty"`
	FailedInterfaces     []*InterfaceId          `protobuf:"bytes,3,rep,name=FailedInterfaces,proto3" json:"FailedInterfaces,omitempty"`
	StatusTalkerListener []*TalkerListenerStatus `protobuf:"bytes,4,rep,name=StatusTalkerListener,proto3" json:"StatusTalkerListener,omitempty"`
	EndStationInterfaces []*Interface            `protobuf:"bytes,5,rep,name=EndStationInterfaces,proto3" json:"EndStationInterfaces,omitempty"`
}

func (x *StatusGroup) Reset() {
	*x = StatusGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusGroup) ProtoMessage() {}

func (x *StatusGroup) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusGroup.ProtoReflect.Descriptor instead.
func (*StatusGroup) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{23}
}

func (x *StatusGroup) GetStrId() *StreamId {
	if x != nil {
		return x.StrId
	}
	return nil
}

func (x *StatusGroup) GetStatusInfo() *StatusInfo {
	if x != nil {
		return x.StatusInfo
	}
	return nil
}

func (x *StatusGroup) GetFailedInterfaces() []*InterfaceId {
	if x != nil {
		return x.FailedInterfaces
	}
	return nil
}

func (x *StatusGroup) GetStatusTalkerListener() []*TalkerListenerStatus {
	if x != nil {
		return x.StatusTalkerListener
	}
	return nil
}

func (x *StatusGroup) GetEndStationInterfaces() []*Interface {
	if x != nil {
		return x.EndStationInterfaces
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusGroup *StatusGroup `protobuf:"bytes,1,opt,name=StatusGroup,proto3" json:"StatusGroup,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{24}
}

func (x *Response) GetStatusGroup() *StatusGroup {
	if x != nil {
		return x.StatusGroup
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   float32     `protobuf:"fixed32,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Responses []*Response `protobuf:"bytes,2,rep,name=Responses,proto3" json:"Responses,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigResponse) GetVersion() float32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ConfigResponse) GetResponses() []*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

var File_configuration_proto protoreflect.FileDescriptor

var file_configuration_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x61, 0x6d, 0x6c, 0x65, 0x73, 0x73,
	0x54, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d,
	0x2d, 0x73, 0x65, 0x61, 0x6d, 0x6c, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x41, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x56, 0x6c, 0x61,
	0x6e, 0x54, 0x61, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x74, 0x61, 0x67, 0x2d, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x2d, 0x69, 0x64, 0x22, 0x55, 0x0a,
	0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x69, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31,
	0x0a, 0x05, 0x53, 0x74, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x69,
	0x64, 0x12, 0x4e, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x43, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x20, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x22, 0x60, 0x0a, 0x0e, 0x49, 0x65, 0x65, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x6d, 0x61, 0x63, 0x22, 0x56, 0x0a, 0x0b, 0x49, 0x65, 0x65, 0x65, 0x56, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x2d, 0x69, 0x64, 0x22, 0xb5, 0x01, 0x0a,
	0x09, 0x49, 0x70, 0x76, 0x34, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x72,
	0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x72, 0x63, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0a, 0x44, 0x65,
	0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x73, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x07,
	0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x2d,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x49, 0x70, 0x76, 0x36, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x20, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x70, 0x2d,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x73, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9c, 0x02, 0x0a,
	0x16, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a,
	0x07, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x65, 0x65, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x69,
	0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2d, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x65, 0x65, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x67, 0x52, 0x10, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2d, 0x76, 0x6c, 0x61, 0x6e, 0x2d,
	0x74, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x49, 0x70, 0x76, 0x34, 0x54, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x07,
	0x69, 0x70, 0x76, 0x34, 0x74, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x49, 0x70, 0x76, 0x36, 0x54,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x07, 0x69, 0x70, 0x76, 0x36, 0x74, 0x75, 0x70, 0x22, 0x4a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x77, 0x61, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x2d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x34, 0x0a, 0x14, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2d, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x98, 0x02,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x14, 0x4d,
	0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x2d, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x2d, 0x70, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x61, 0x77, 0x61, 0x72, 0x65, 0x22, 0xb3, 0x04, 0x0a, 0x0b, 0x54, 0x61, 0x6c,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x53,
	0x74, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x4e, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x16, 0x65, 0x6e,
	0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x61, 0x74,
	0x61, 0x2d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x1c, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x43, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x80,
	0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x54, 0x61,
	0x6c, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x5d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x7a, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x12,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x29, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8b, 0x03,
	0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x65, 0x65, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x65, 0x65, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67,
	0x52, 0x07, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x49, 0x70, 0x76,
	0x34, 0x54, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x49, 0x70, 0x76, 0x34, 0x54, 0x75, 0x70, 0x12, 0x32, 0x0a,
	0x07, 0x49, 0x70, 0x76, 0x36, 0x54, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x49, 0x70, 0x76, 0x36, 0x54, 0x75,
	0x70, 0x12, 0x48, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x77, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x77, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x14,
	0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5d, 0x0a,
	0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x05,
	0x53, 0x74, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x52, 0x05, 0x53, 0x74, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x52, 0x10, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x6c,
	0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x14, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x61, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_configuration_proto_rawDescOnce sync.Once
	file_configuration_proto_rawDescData = file_configuration_proto_rawDesc
)

func file_configuration_proto_rawDescGZIP() []byte {
	file_configuration_proto_rawDescOnce.Do(func() {
		file_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_configuration_proto_rawDescData)
	})
	return file_configuration_proto_rawDescData
}

var file_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_configuration_proto_goTypes = []interface{}{
	(*UserToNetworkRequirements)(nil), // 0: configuration.UserToNetworkRequirements
	(*InterfaceCapabilities)(nil),     // 1: configuration.InterfaceCapabilities
	(*StreamId)(nil),                  // 2: configuration.StreamId
	(*InterfaceId)(nil),               // 3: configuration.InterfaceId
	(*Interface)(nil),                 // 4: configuration.Interface
	(*ListenerGroup)(nil),             // 5: configuration.ListenerGroup
	(*StreamRank)(nil),                // 6: configuration.StreamRank
	(*IeeeMacAddress)(nil),            // 7: configuration.IeeeMacAddress
	(*IeeeVlanTag)(nil),               // 8: configuration.IeeeVlanTag
	(*Ipv4Tuple)(nil),                 // 9: configuration.Ipv4Tuple
	(*Ipv6Tuple)(nil),                 // 10: configuration.Ipv6Tuple
	(*DataFrameSpecification)(nil),    // 11: configuration.DataFrameSpecification
	(*Interval)(nil),                  // 12: configuration.Interval
	(*TimeAware)(nil),                 // 13: configuration.TimeAware
	(*TrafficSpecification)(nil),      // 14: configuration.TrafficSpecification
	(*TalkerGroup)(nil),               // 15: configuration.TalkerGroup
	(*Request)(nil),                   // 16: configuration.Request
	(*ConfigRequest)(nil),             // 17: configuration.ConfigRequest
	(*StatusInfo)(nil),                // 18: configuration.StatusInfo
	(*AccumulatedLatency)(nil),        // 19: configuration.AccumulatedLatency
	(*TimeAwareOffset)(nil),           // 20: configuration.TimeAwareOffset
	(*InterfaceConfiguration)(nil),    // 21: configuration.InterfaceConfiguration
	(*TalkerListenerStatus)(nil),      // 22: configuration.TalkerListenerStatus
	(*StatusGroup)(nil),               // 23: configuration.StatusGroup
	(*Response)(nil),                  // 24: configuration.Response
	(*ConfigResponse)(nil),            // 25: configuration.ConfigResponse
}
var file_configuration_proto_depIdxs = []int32{
	3,  // 0: configuration.Interface.InterfaceId:type_name -> configuration.InterfaceId
	2,  // 1: configuration.ListenerGroup.StrId:type_name -> configuration.StreamId
	4,  // 2: configuration.ListenerGroup.EndStationInterfaces:type_name -> configuration.Interface
	0,  // 3: configuration.ListenerGroup.UserToNetReq:type_name -> configuration.UserToNetworkRequirements
	1,  // 4: configuration.ListenerGroup.InterfCap:type_name -> configuration.InterfaceCapabilities
	7,  // 5: configuration.DataFrameSpecification.MacAddr:type_name -> configuration.IeeeMacAddress
	8,  // 6: configuration.DataFrameSpecification.VlanTag:type_name -> configuration.IeeeVlanTag
	9,  // 7: configuration.DataFrameSpecification.Ipv4Tup:type_name -> configuration.Ipv4Tuple
	10, // 8: configuration.DataFrameSpecification.Ipv6Tup:type_name -> configuration.Ipv6Tuple
	12, // 9: configuration.TrafficSpecification.Interval:type_name -> configuration.Interval
	13, // 10: configuration.TrafficSpecification.TimeAware:type_name -> configuration.TimeAware
	2,  // 11: configuration.TalkerGroup.StrId:type_name -> configuration.StreamId
	6,  // 12: configuration.TalkerGroup.StrRank:type_name -> configuration.StreamRank
	4,  // 13: configuration.TalkerGroup.EndStationInterfaces:type_name -> configuration.Interface
	11, // 14: configuration.TalkerGroup.DataFrameSpecification:type_name -> configuration.DataFrameSpecification
	14, // 15: configuration.TalkerGroup.TrafficSpecification:type_name -> configuration.TrafficSpecification
	0,  // 16: configuration.TalkerGroup.UserToNetReq:type_name -> configuration.UserToNetworkRequirements
	1,  // 17: configuration.TalkerGroup.InterfCap:type_name -> configuration.InterfaceCapabilities
	15, // 18: configuration.Request.Talker:type_name -> configuration.TalkerGroup
	5,  // 19: configuration.Request.ListenerList:type_name -> configuration.ListenerGroup
	16, // 20: configuration.ConfigRequest.Requests:type_name -> configuration.Request
	3,  // 21: configuration.InterfaceConfiguration.InterfaceId:type_name -> configuration.InterfaceId
	7,  // 22: configuration.InterfaceConfiguration.MacAddr:type_name -> configuration.IeeeMacAddress
	8,  // 23: configuration.InterfaceConfiguration.VlanTag:type_name -> configuration.IeeeVlanTag
	9,  // 24: configuration.InterfaceConfiguration.Ipv4Tup:type_name -> configuration.Ipv4Tuple
	10, // 25: configuration.InterfaceConfiguration.Ipv6Tup:type_name -> configuration.Ipv6Tuple
	20, // 26: configuration.InterfaceConfiguration.TimeAwareOffset:type_name -> configuration.TimeAwareOffset
	19, // 27: configuration.TalkerListenerStatus.AccumulatedLatency:type_name -> configuration.AccumulatedLatency
	21, // 28: configuration.TalkerListenerStatus.InterfaceConfiguration:type_name -> configuration.InterfaceConfiguration
	2,  // 29: configuration.StatusGroup.StrId:type_name -> configuration.StreamId
	18, // 30: configuration.StatusGroup.StatusInfo:type_name -> configuration.StatusInfo
	3,  // 31: configuration.StatusGroup.FailedInterfaces:type_name -> configuration.InterfaceId
	22, // 32: configuration.StatusGroup.StatusTalkerListener:type_name -> configuration.TalkerListenerStatus
	4,  // 33: configuration.StatusGroup.EndStationInterfaces:type_name -> configuration.Interface
	23, // 34: configuration.Response.StatusGroup:type_name -> configuration.StatusGroup
	24, // 35: configuration.ConfigResponse.Responses:type_name -> configuration.Response
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_configuration_proto_init() }
func file_configuration_proto_init() {
	if File_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToNetworkRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IeeeMacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IeeeVlanTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrameSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeAware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccumulatedLatency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeAwareOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkerListenerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_configuration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_configuration_proto_goTypes,
		DependencyIndexes: file_configuration_proto_depIdxs,
		MessageInfos:      file_configuration_proto_msgTypes,
	}.Build()
	File_configuration_proto = out.File
	file_configuration_proto_rawDesc = nil
	file_configuration_proto_goTypes = nil
	file_configuration_proto_depIdxs = nil
}
