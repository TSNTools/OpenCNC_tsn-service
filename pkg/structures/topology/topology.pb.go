//protoc --go_out=. --go_opt=paths=source_relative ./pkg/structures/topology/topology.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: pkg/structures/topology/topology.proto

package topology

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_ACTIVE Status = 0
	Status_IDLE   Status = 1
	Status_LOST   Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "ACTIVE",
		1: "IDLE",
		2: "LOST",
	}
	Status_value = map[string]int32{
		"ACTIVE": 0,
		"IDLE":   1,
		"LOST":   2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_structures_topology_topology_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_pkg_structures_topology_topology_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{0}
}

type Model int32

const (
	Model_HD Model = 0
	Model_FD Model = 1
)

// Enum value maps for Model.
var (
	Model_name = map[int32]string{
		0: "HD",
		1: "FD",
	}
	Model_value = map[string]int32{
		"HD": 0,
		"FD": 1,
	}
)

func (x Model) Enum() *Model {
	p := new(Model)
	*p = x
	return p
}

func (x Model) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_structures_topology_topology_proto_enumTypes[1].Descriptor()
}

func (Model) Type() protoreflect.EnumType {
	return &file_pkg_structures_topology_topology_proto_enumTypes[1]
}

func (x Model) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model.Descriptor instead.
func (Model) EnumDescriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{1}
}

type LinkState int32

const (
	LinkState_UP   LinkState = 0
	LinkState_DOWN LinkState = 1
)

// Enum value maps for LinkState.
var (
	LinkState_name = map[int32]string{
		0: "UP",
		1: "DOWN",
	}
	LinkState_value = map[string]int32{
		"UP":   0,
		"DOWN": 1,
	}
)

func (x LinkState) Enum() *LinkState {
	p := new(LinkState)
	*p = x
	return p
}

func (x LinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_structures_topology_topology_proto_enumTypes[2].Descriptor()
}

func (LinkState) Type() protoreflect.EnumType {
	return &file_pkg_structures_topology_topology_proto_enumTypes[2]
}

func (x LinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkState.Descriptor instead.
func (LinkState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{2}
}

type Topology struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*Node                `protobuf:"bytes,1,rep,name=Nodes,json=nodes,proto3" json:"Nodes,omitempty"`
	Links         []*Link                `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	Index         int32                  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Topology) Reset() {
	*x = Topology{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{0}
}

func (x *Topology) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Topology) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Topology) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  string                 `protobuf:"bytes,1,opt,name=Type,json=type,proto3" json:"Type,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Ports []*Port                `protobuf:"bytes,3,rep,name=Ports,json=ports,proto3" json:"Ports,omitempty"`
	// Types that are valid to be assigned to NodeType:
	//
	//	*Node_Bridge
	//	*Node_Endnode
	NodeType        isNode_NodeType `protobuf_oneof:"node_type"`
	ProcessingDelay int32           `protobuf:"varint,6,opt,name=ProcessingDelay,json=procDelay,proto3" json:"ProcessingDelay,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Node) GetNodeType() isNode_NodeType {
	if x != nil {
		return x.NodeType
	}
	return nil
}

func (x *Node) GetBridge() *Bridge {
	if x != nil {
		if x, ok := x.NodeType.(*Node_Bridge); ok {
			return x.Bridge
		}
	}
	return nil
}

func (x *Node) GetEndnode() *EndNode {
	if x != nil {
		if x, ok := x.NodeType.(*Node_Endnode); ok {
			return x.Endnode
		}
	}
	return nil
}

func (x *Node) GetProcessingDelay() int32 {
	if x != nil {
		return x.ProcessingDelay
	}
	return 0
}

type isNode_NodeType interface {
	isNode_NodeType()
}

type Node_Bridge struct {
	Bridge *Bridge `protobuf:"bytes,4,opt,name=bridge,proto3,oneof"`
}

type Node_Endnode struct {
	Endnode *EndNode `protobuf:"bytes,5,opt,name=endnode,proto3,oneof"`
}

func (*Node_Bridge) isNode_NodeType() {}

func (*Node_Endnode) isNode_NodeType() {}

type EndNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndNode) Reset() {
	*x = EndNode{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndNode) ProtoMessage() {}

func (x *EndNode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndNode.ProtoReflect.Descriptor instead.
func (*EndNode) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{2}
}

func (x *EndNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Bridge struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	InventoryInfo      *InventoryInfo         `protobuf:"bytes,2,opt,name=InventoryInfo,proto3" json:"InventoryInfo,omitempty"`
	Status             Status                 `protobuf:"varint,3,opt,name=Status,proto3,enum=topology.Status" json:"Status,omitempty"`
	SupportedProtocols []string               `protobuf:"bytes,4,rep,name=SupportedProtocols,proto3" json:"SupportedProtocols,omitempty"`
	Capabilities       []string               `protobuf:"bytes,5,rep,name=Capabilities,proto3" json:"Capabilities,omitempty"`
	AvailiablePorts    []*Port                `protobuf:"bytes,6,rep,name=AvailiablePorts,proto3" json:"AvailiablePorts,omitempty"`
	ManagementInfo     *ManagementInfo        `protobuf:"bytes,7,opt,name=ManagementInfo,proto3" json:"ManagementInfo,omitempty"`
	DeviceModel        string                 `protobuf:"bytes,8,opt,name=DeviceModel,proto3" json:"DeviceModel,omitempty"`
	ProcessingDelay    int32                  `protobuf:"varint,9,opt,name=ProcessingDelay,json=procDelay,proto3" json:"ProcessingDelay,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

func (x *Bridge) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{3}
}

func (x *Bridge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bridge) GetInventoryInfo() *InventoryInfo {
	if x != nil {
		return x.InventoryInfo
	}
	return nil
}

func (x *Bridge) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

func (x *Bridge) GetSupportedProtocols() []string {
	if x != nil {
		return x.SupportedProtocols
	}
	return nil
}

func (x *Bridge) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Bridge) GetAvailiablePorts() []*Port {
	if x != nil {
		return x.AvailiablePorts
	}
	return nil
}

func (x *Bridge) GetManagementInfo() *ManagementInfo {
	if x != nil {
		return x.ManagementInfo
	}
	return nil
}

func (x *Bridge) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *Bridge) GetProcessingDelay() int32 {
	if x != nil {
		return x.ProcessingDelay
	}
	return 0
}

type ManagementInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type will most likely change
	KeyCertificates []string `protobuf:"bytes,1,rep,name=KeyCertificates,proto3" json:"KeyCertificates,omitempty"`
	IpAddress       string   `protobuf:"bytes,2,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	UserName        string   `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	// Type will most likely change
	ManageVlan    string `protobuf:"bytes,4,opt,name=ManageVlan,proto3" json:"ManageVlan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagementInfo) Reset() {
	*x = ManagementInfo{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementInfo) ProtoMessage() {}

func (x *ManagementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementInfo.ProtoReflect.Descriptor instead.
func (*ManagementInfo) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{4}
}

func (x *ManagementInfo) GetKeyCertificates() []string {
	if x != nil {
		return x.KeyCertificates
	}
	return nil
}

func (x *ManagementInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ManagementInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ManagementInfo) GetManageVlan() string {
	if x != nil {
		return x.ManageVlan
	}
	return ""
}

type InventoryInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SoftwareVersion string                 `protobuf:"bytes,1,opt,name=SoftwareVersion,proto3" json:"SoftwareVersion,omitempty"` //TODO: add more
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InventoryInfo) Reset() {
	*x = InventoryInfo{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryInfo) ProtoMessage() {}

func (x *InventoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryInfo.ProtoReflect.Descriptor instead.
func (*InventoryInfo) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{5}
}

func (x *InventoryInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

type Port struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      string                 `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	Name                    string                 `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	PortSpeed               int32                  `protobuf:"varint,3,opt,name=PortSpeed,json=portSpeed,proto3" json:"PortSpeed,omitempty"`
	Model                   Model                  `protobuf:"varint,4,opt,name=Model,proto3,enum=topology.Model" json:"Model,omitempty"`
	MacAddress              string                 `protobuf:"bytes,5,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	IpAddress               string                 `protobuf:"bytes,6,opt,name=IpAddress,proto3" json:"IpAddress,omitempty"`
	NumberOfQueues          int32                  `protobuf:"varint,7,opt,name=NumberOfQueues,json=numberOfQueues,proto3" json:"NumberOfQueues,omitempty"`
	MaximumTransmissionUnit int32                  `protobuf:"varint,8,opt,name=MaximumTransmissionUnit,proto3" json:"MaximumTransmissionUnit,omitempty"`
	TrafficClassMTUs        map[string]int32       `protobuf:"bytes,9,rep,name=TrafficClassMTUs,proto3" json:"TrafficClassMTUs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TrafficClassQueues      map[string]int32       `protobuf:"bytes,10,rep,name=TrafficClassQueues,proto3" json:"TrafficClassQueues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	PortCapabilities        []string               `protobuf:"bytes,11,rep,name=PortCapabilities,proto3" json:"PortCapabilities,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{6}
}

func (x *Port) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetPortSpeed() int32 {
	if x != nil {
		return x.PortSpeed
	}
	return 0
}

func (x *Port) GetModel() Model {
	if x != nil {
		return x.Model
	}
	return Model_HD
}

func (x *Port) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Port) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Port) GetNumberOfQueues() int32 {
	if x != nil {
		return x.NumberOfQueues
	}
	return 0
}

func (x *Port) GetMaximumTransmissionUnit() int32 {
	if x != nil {
		return x.MaximumTransmissionUnit
	}
	return 0
}

func (x *Port) GetTrafficClassMTUs() map[string]int32 {
	if x != nil {
		return x.TrafficClassMTUs
	}
	return nil
}

func (x *Port) GetTrafficClassQueues() map[string]int32 {
	if x != nil {
		return x.TrafficClassQueues
	}
	return nil
}

func (x *Port) GetPortCapabilities() []string {
	if x != nil {
		return x.PortCapabilities
	}
	return nil
}

type Link struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	Source           string                 `protobuf:"bytes,2,opt,name=Source,json=source,proto3" json:"Source,omitempty"`
	Target           string                 `protobuf:"bytes,3,opt,name=Target,json=target,proto3" json:"Target,omitempty"`
	PropogationDelay int64                  `protobuf:"varint,4,opt,name=PropogationDelay,json=propogationDelay,proto3" json:"PropogationDelay,omitempty"`
	Bandwidth        int64                  `protobuf:"varint,5,opt,name=Bandwidth,json=bandwidth,proto3" json:"Bandwidth,omitempty"`
	EndPorts         []*Port                `protobuf:"bytes,6,rep,name=EndPorts,json=endPorts,proto3" json:"EndPorts,omitempty"`
	LinkState        LinkState              `protobuf:"varint,7,opt,name=LinkState,json=state,proto3,enum=topology.LinkState" json:"LinkState,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_structures_topology_topology_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_pkg_structures_topology_topology_proto_rawDescGZIP(), []int{7}
}

func (x *Link) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Link) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Link) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Link) GetPropogationDelay() int64 {
	if x != nil {
		return x.PropogationDelay
	}
	return 0
}

func (x *Link) GetBandwidth() int64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *Link) GetEndPorts() []*Port {
	if x != nil {
		return x.EndPorts
	}
	return nil
}

func (x *Link) GetLinkState() LinkState {
	if x != nil {
		return x.LinkState
	}
	return LinkState_UP
}

var File_pkg_structures_topology_topology_proto protoreflect.FileDescriptor

var file_pkg_structures_topology_topology_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x22, 0x6c, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x24,
	0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xe0, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x19, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x97,
	0x03, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x0f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x4b,
	0x65, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x65, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x22,
	0x39, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x04, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x54, 0x55, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4d, 0x54, 0x55, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x54, 0x55, 0x73, 0x12, 0x56,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4d, 0x54, 0x55, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb,
	0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x28, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x17, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x06, 0x0a, 0x02, 0x48, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x44, 0x10, 0x01, 0x2a,
	0x1d, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02,
	0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x42, 0x0b,
	0x5a, 0x09, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_pkg_structures_topology_topology_proto_rawDescOnce sync.Once
	file_pkg_structures_topology_topology_proto_rawDescData []byte
)

func file_pkg_structures_topology_topology_proto_rawDescGZIP() []byte {
	file_pkg_structures_topology_topology_proto_rawDescOnce.Do(func() {
		file_pkg_structures_topology_topology_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_structures_topology_topology_proto_rawDesc), len(file_pkg_structures_topology_topology_proto_rawDesc)))
	})
	return file_pkg_structures_topology_topology_proto_rawDescData
}

var file_pkg_structures_topology_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_structures_topology_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pkg_structures_topology_topology_proto_goTypes = []any{
	(Status)(0),            // 0: topology.Status
	(Model)(0),             // 1: topology.Model
	(LinkState)(0),         // 2: topology.LinkState
	(*Topology)(nil),       // 3: topology.Topology
	(*Node)(nil),           // 4: topology.Node
	(*EndNode)(nil),        // 5: topology.EndNode
	(*Bridge)(nil),         // 6: topology.Bridge
	(*ManagementInfo)(nil), // 7: topology.ManagementInfo
	(*InventoryInfo)(nil),  // 8: topology.InventoryInfo
	(*Port)(nil),           // 9: topology.Port
	(*Link)(nil),           // 10: topology.Link
	nil,                    // 11: topology.Port.TrafficClassMTUsEntry
	nil,                    // 12: topology.Port.TrafficClassQueuesEntry
}
var file_pkg_structures_topology_topology_proto_depIdxs = []int32{
	4,  // 0: topology.Topology.Nodes:type_name -> topology.Node
	10, // 1: topology.Topology.links:type_name -> topology.Link
	9,  // 2: topology.Node.Ports:type_name -> topology.Port
	6,  // 3: topology.Node.bridge:type_name -> topology.Bridge
	5,  // 4: topology.Node.endnode:type_name -> topology.EndNode
	8,  // 5: topology.Bridge.InventoryInfo:type_name -> topology.InventoryInfo
	0,  // 6: topology.Bridge.Status:type_name -> topology.Status
	9,  // 7: topology.Bridge.AvailiablePorts:type_name -> topology.Port
	7,  // 8: topology.Bridge.ManagementInfo:type_name -> topology.ManagementInfo
	1,  // 9: topology.Port.Model:type_name -> topology.Model
	11, // 10: topology.Port.TrafficClassMTUs:type_name -> topology.Port.TrafficClassMTUsEntry
	12, // 11: topology.Port.TrafficClassQueues:type_name -> topology.Port.TrafficClassQueuesEntry
	9,  // 12: topology.Link.EndPorts:type_name -> topology.Port
	2,  // 13: topology.Link.LinkState:type_name -> topology.LinkState
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pkg_structures_topology_topology_proto_init() }
func file_pkg_structures_topology_topology_proto_init() {
	if File_pkg_structures_topology_topology_proto != nil {
		return
	}
	file_pkg_structures_topology_topology_proto_msgTypes[1].OneofWrappers = []any{
		(*Node_Bridge)(nil),
		(*Node_Endnode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_structures_topology_topology_proto_rawDesc), len(file_pkg_structures_topology_topology_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_structures_topology_topology_proto_goTypes,
		DependencyIndexes: file_pkg_structures_topology_topology_proto_depIdxs,
		EnumInfos:         file_pkg_structures_topology_topology_proto_enumTypes,
		MessageInfos:      file_pkg_structures_topology_topology_proto_msgTypes,
	}.Build()
	File_pkg_structures_topology_topology_proto = out.File
	file_pkg_structures_topology_topology_proto_goTypes = nil
	file_pkg_structures_topology_topology_proto_depIdxs = nil
}
