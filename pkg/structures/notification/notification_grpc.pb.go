// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: notification.proto

package notification

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	CalcConfig(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*UUID, error)
	// MSTP tables to configur
	UpdateConfigMstpCistPortTable(ctx context.Context, in *InMstpCistPortTableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateConfigMstpCistTable(ctx context.Context, in *InMstpCistTableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateConfigMstpConfigTable(ctx context.Context, in *InMstpConfigTableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateConfigMstpFidToMstiV2Table(ctx context.Context, in *InMstpFidToMstiV2TableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateConfigMstpPortTable(ctx context.Context, in *InMstpPortTableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateConfigMstpTable(ctx context.Context, in *InMstpTableRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) CalcConfig(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/notification.Notification/CalcConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) UpdateConfigMstpCistPortTable(ctx context.Context, in *InMstpCistPortTableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/notification.Notification/UpdateConfigMstpCistPortTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) UpdateConfigMstpCistTable(ctx context.Context, in *InMstpCistTableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/notification.Notification/UpdateConfigMstpCistTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) UpdateConfigMstpConfigTable(ctx context.Context, in *InMstpConfigTableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/notification.Notification/UpdateConfigMstpConfigTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) UpdateConfigMstpFidToMstiV2Table(ctx context.Context, in *InMstpFidToMstiV2TableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/notification.Notification/UpdateConfigMstpFidToMstiV2Table", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) UpdateConfigMstpPortTable(ctx context.Context, in *InMstpPortTableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/notification.Notification/UpdateConfigMstpPortTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) UpdateConfigMstpTable(ctx context.Context, in *InMstpTableRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/notification.Notification/UpdateConfigMstpTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	CalcConfig(context.Context, *IdList) (*UUID, error)
	// MSTP tables to configur
	UpdateConfigMstpCistPortTable(context.Context, *InMstpCistPortTableRequest) (*empty.Empty, error)
	UpdateConfigMstpCistTable(context.Context, *InMstpCistTableRequest) (*empty.Empty, error)
	UpdateConfigMstpConfigTable(context.Context, *InMstpConfigTableRequest) (*empty.Empty, error)
	UpdateConfigMstpFidToMstiV2Table(context.Context, *InMstpFidToMstiV2TableRequest) (*empty.Empty, error)
	UpdateConfigMstpPortTable(context.Context, *InMstpPortTableRequest) (*empty.Empty, error)
	UpdateConfigMstpTable(context.Context, *InMstpTableRequest) (*empty.Empty, error)
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) CalcConfig(context.Context, *IdList) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcConfig not implemented")
}
func (UnimplementedNotificationServer) UpdateConfigMstpCistPortTable(context.Context, *InMstpCistPortTableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMstpCistPortTable not implemented")
}
func (UnimplementedNotificationServer) UpdateConfigMstpCistTable(context.Context, *InMstpCistTableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMstpCistTable not implemented")
}
func (UnimplementedNotificationServer) UpdateConfigMstpConfigTable(context.Context, *InMstpConfigTableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMstpConfigTable not implemented")
}
func (UnimplementedNotificationServer) UpdateConfigMstpFidToMstiV2Table(context.Context, *InMstpFidToMstiV2TableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMstpFidToMstiV2Table not implemented")
}
func (UnimplementedNotificationServer) UpdateConfigMstpPortTable(context.Context, *InMstpPortTableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMstpPortTable not implemented")
}
func (UnimplementedNotificationServer) UpdateConfigMstpTable(context.Context, *InMstpTableRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMstpTable not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&Notification_ServiceDesc, srv)
}

func _Notification_CalcConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).CalcConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/CalcConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).CalcConfig(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_UpdateConfigMstpCistPortTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMstpCistPortTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UpdateConfigMstpCistPortTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UpdateConfigMstpCistPortTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UpdateConfigMstpCistPortTable(ctx, req.(*InMstpCistPortTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_UpdateConfigMstpCistTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMstpCistTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UpdateConfigMstpCistTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UpdateConfigMstpCistTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UpdateConfigMstpCistTable(ctx, req.(*InMstpCistTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_UpdateConfigMstpConfigTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMstpConfigTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UpdateConfigMstpConfigTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UpdateConfigMstpConfigTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UpdateConfigMstpConfigTable(ctx, req.(*InMstpConfigTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_UpdateConfigMstpFidToMstiV2Table_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMstpFidToMstiV2TableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UpdateConfigMstpFidToMstiV2Table(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UpdateConfigMstpFidToMstiV2Table",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UpdateConfigMstpFidToMstiV2Table(ctx, req.(*InMstpFidToMstiV2TableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_UpdateConfigMstpPortTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMstpPortTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UpdateConfigMstpPortTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UpdateConfigMstpPortTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UpdateConfigMstpPortTable(ctx, req.(*InMstpPortTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_UpdateConfigMstpTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InMstpTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).UpdateConfigMstpTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.Notification/UpdateConfigMstpTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).UpdateConfigMstpTable(ctx, req.(*InMstpTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notification_ServiceDesc is the grpc.ServiceDesc for Notification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalcConfig",
			Handler:    _Notification_CalcConfig_Handler,
		},
		{
			MethodName: "UpdateConfigMstpCistPortTable",
			Handler:    _Notification_UpdateConfigMstpCistPortTable_Handler,
		},
		{
			MethodName: "UpdateConfigMstpCistTable",
			Handler:    _Notification_UpdateConfigMstpCistTable_Handler,
		},
		{
			MethodName: "UpdateConfigMstpConfigTable",
			Handler:    _Notification_UpdateConfigMstpConfigTable_Handler,
		},
		{
			MethodName: "UpdateConfigMstpFidToMstiV2Table",
			Handler:    _Notification_UpdateConfigMstpFidToMstiV2Table_Handler,
		},
		{
			MethodName: "UpdateConfigMstpPortTable",
			Handler:    _Notification_UpdateConfigMstpPortTable_Handler,
		},
		{
			MethodName: "UpdateConfigMstpTable",
			Handler:    _Notification_UpdateConfigMstpTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}
